---
layout: post
title: 'mysql note'
date: 2017-01-05
author: Pengfei.X
version: 0.1
categories: [devnotes, ]
---

## alter table add MULTIPLE columns

    ALTER TABLE users
    ADD COLUMN `count` SMALLINT(6) NOT NULL AFTER `lastname`,
    ADD COLUMN `log` VARCHAR(12) NOT NULL AFTER `count`,
    ADD COLUMN `status` INT(10) UNSIGNED NOT NULL AFTER `log`;


## add columns for big table

- Create a new table (using the structure of the current table) with the new column(s) included.
- execute a INSERT INTO new_table (column1,..columnN) SELECT (column1,..columnN) FROM current_table;
- rename the current table
- rename the new table using the name of the current table.

[optimize mySql for faster alter table add column](http://stackoverflow.com/questions/5677932/optimize-mysql-for-faster-alter-table-add-column)


## Clustered and Secondary Indexes

Every InnoDB table has a special index called the clustered index where the data for the rows is stored. Typically, the clustered index is synonymous with the primary key. To get the best performance from queries, inserts, and other database operations, you must understand how InnoDB uses the clustered index to optimize the most common lookup and DML operations for each table.

When you define a PRIMARY KEY on your table, InnoDB uses it as the clustered index. Define a primary key for each table that you create. If there is no logical unique and non-null column or set of columns, add a new auto-increment column, whose values are filled in automatically.

If you do not define a PRIMARY KEY for your table, MySQL locates the first UNIQUE index where all the key columns are NOT NULL and InnoDB uses it as the clustered index.

If the table has no PRIMARY KEY or suitable UNIQUE index, InnoDB internally generates a hidden clustered index on a synthetic column containing row ID values. The rows are ordered by the ID that InnoDB assigns to the rows in such a table. The row ID is a 6-byte field that increases monotonically as new rows are inserted. Thus, the rows ordered by the row ID are physically in insertion order.

How the Clustered Index Speeds Up Queries

Accessing a row through the clustered index is fast because the index search leads directly to the page with all the row data. If a table is large, the clustered index architecture often saves a disk I/O operation when compared to storage organizations that store row data using a different page from the index record. (For example, MyISAM uses one file for data rows and another for index records.)

How Secondary Indexes Relate to the Clustered Index

All indexes other than the clustered index are known as secondary indexes. In InnoDB, each record in a secondary index contains the primary key columns for the row, as well as the columns specified for the secondary index. InnoDB uses this primary key value to search for the row in the clustered index.

If the primary key is long, the secondary indexes use more space, so it is advantageous to have a short primary key.

[Clustered and Secondary Indexes](https://dev.mysql.com/doc/refman/5.7/en/innodb-index-types.html)


## How to change the default charset of a MySQL table?

    ALTER TABLE etape_prospection CONVERT TO CHARACTER SET utf8;

http://stackoverflow.com/questions/8906813/how-to-change-the-default-charset-of-a-mysql-table


## 获取两个日期的天数差

    SELECT DATEDIFF('2010-10-08 18:23:13', '2010-09-21 21:40:36') AS days;

    +------+
    | days |
    +------+
    |   17 |
    +------+

http://stackoverflow.com/questions/2546053/mysql-difference-between-two-timestamps-in-days


## 在where条件中判断，日期是否在N天前/后

    delete from appchecker_checkrecord where check_time <= curdate() - interval 5 day;

http://dba.stackexchange.com/questions/60837/datediff-in-mysql
