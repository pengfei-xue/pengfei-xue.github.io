---
layout: post
title: '架构即未来 - 管理故障和问题'
date: 2016-12-14
author: Pengfei.X
version: 0.1
categories: [reading,]
---

不能发现和和解决过去的问题就无法从构架，研发和运维的过去错误中学习。不认识过去的错误并从中吸取教训，
以确保不重蹈覆辙，其结果将是灾难性的。

故障，任何降低服务质量的事件。宕机，导致用户响应时间增加，返回给用户不正确或意外的结果。

问题的定义是，不明原因引起的一个或者多个故障，往往被确认是多个类似故障的结果。事件(故障)和其
根源(问题)。从定义上区别事故和问题，使我们在日常运维过程中寻找不同的策略。如果每次恢复服务前都要
先找到问题根源，可用性就会降低。故障管理（与恢复服务有关）和问题管理（与查找问题根源和解决问题）
往往是相互矛盾的。

要监控的系统在设计时并没有考虑到要被监控，对监缺乏计划，有条理的迭代发展方式。

太多公司忽略了从客户的角度监控系统。理想情况下，你应该建立或集成实时监控和报警系统。改系统可以模拟
用户如何使用平台并进行最关键的场景。当系统的表现超出内部定义的响应时间和可用性服务水平时，发出警报。
其次，建立过程和实施支持工具，以帮助确定究竟是那些系统造成这一事故。理想情况下，可以建立一个故障隔离
构架，创建故障域以隔离并定位故障。

问题有大有小。小问题可以交给一个人去处理。在问题解决后准备关闭时，要先在QA系统验证确定是否满足测试
标准。经过适当的管理人员或发生事故系统的负责人的确认后，管体可以关闭。较大的问题更为复杂，有专门
的程序帮忙确保问题得到快速解决。一个大的问题可能与事后处理主题相关，这些反过来又会推动更多的调查
或解决问题的任务。对这些任务的结果，应该采取下列方法之一进行定期审查：1，负责解决问题的项目经理；
2，负责跟踪问题解决的经理；3，在一个专门处理事故跟踪和解决的会议上，如我们推荐的每日事故列会。

未关闭问题是于事故相关的问题处在打开或定位，但还没有到彻底关闭的程度。每日列会上，都要对未关闭的问题
进行审查。确保优先级正确，确定在向前推进，不存在障碍。如果一天时间审查不完所有问题，可以安排轮流
审查，从影响最大，优先级最高的问题开始。问题分类的方式要与业务需求一致，并且要能够反映出那种来源
（内部还是外部供应商），哪个子系统（存储，服务器，数据库，登录应用，购买应用），那类影响（可扩展性，
可用性，响应时间）。分类特别重要，如果从中能抽取出有意义的数据，将有助于正在进行中的扩展性项目。问题
应该继承由事故带来的影响，这包括累计宕机时间，响应时间。

需要一个回顾和总结的机制来检查事故和问题管理过程的完备性和有效性，以确保可以成功地解决那些反复发生
的事故和问题。此外，为确保扩展性项目资源使用得当，需要针对每个系统或子系统评价和回顾过去的表现，事故
的频率及其影响。这有助于确定未来构架项目的优先级，成为确定系统容量预留空间过程的输入。
